@page "/add-boat"
@using MauiAVDApp2.Services
@using MauiAVDApp2.Models
@inject IBoatService boatService
@inject IGeocodingService geocodingService

<h3>Add Boat</h3>

<div class="container">
    <div class="row">
        <form @onsubmit="FormSubmit">
            <div class="mb-3">
                <label for="exampleInputName1" class="form-label">Name:</label>
                <input type="text" class="form-control" id="exampleInputName1" placeholder="Bautista" aria-describedby="nameHelp" @bind="boat.BoatName">
            </div>
            <div class="mb-3">
                <label for="form-select" class="form-label">Choose boat type</label>
                <select class="form-select" id="form-select" aria-label="Default select example" @bind="boat.BoatType">
                    <option value="0">Choose your boat type</option>
                    @foreach (var boatType in Enum.GetValues(typeof(BoatType)))
                    {
                        if ((int)boatType == (int)boat.BoatType)
                        {
                            <option value="@((int)boatType)" selected>@boatType</option>
                        }
                        else
                        {
                            <option value="@((int)boatType)">@boatType</option>
                        }
                    }
                </select>

            </div>


            <div class="mb-3">
                <label for="exampleInpuDescription1" class="form-label">Description:</label>
                <input type="text" class="form-control" id="exampleInputDescription1" placeholder="Bestes boat ever" @bind="boat.BoatDescription">
            </div>
            <div class="mb-3">
                <label for="exampleInputCity1" class="form-label">City:</label>
                <input type="text" class="form-control" placeholder="Amsterdam" id="exampleInputCity1" @bind="boat.BoatCity">
            </div>
            <div class="mb-3">
                <label for="exampleInpuDescription1" class="form-label">Manufacturer:</label>
                <input type="text" class="form-control" placeholder="Yamaha" id="exampleInputDescription1" @bind="boat.BoatManufacturer">
            </div>
            <div class="mb-3">
                <label for="exampleInpuDescription1" class="form-label">Model</label>
                <input type="text" class="form-control" placeholder="GXR" id="exampleInputDescription1" @bind="boat.BoatModel">
            </div>
            <div class="mb-3">
                <label for="exampleInpuDescription1" class="form-label">Image</label>
                <input type="text" class="form-control" placeholder="https//:www.google.com/ray-bautista" id="exampleInputDescription1" @bind="boat.BoatImage">
            </div>
            <div class="mb-3">
                <label for="exampleInpuDescription1" class="form-label">Seats</label>
                <input type="number" class="form-control" placeholder="3" id="exampleInputDescription1" @bind="boat.BoatSeats">
            </div>
            <div class="mb-3">
                <label for="exampleInpuDescription1" class="form-label">Price</label>
                <input type="number" class="form-control" placeholder="3.00" id="exampleInputDescription1" @bind="boat.BoatPrice">
            </div>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked" @bind="boat.BoatWithSkipper">
                <label class="form-check-label" for="flexSwitchCheckChecked">With Skipper</label>
            </div>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked" @bind="boat.BoatWithLicense">
                <label class="form-check-label" for="flexSwitchCheckChecked">Customer needs license</label>
            </div>
            <button type="submit" class="btn btn-primary mt-3 d-block">Submit</button>
        </form>
    </div>
</div>

@code {
    Boat boat = new Boat();

    private async Task FormSubmit()
    {
        var response = await boatService.AddBoat(boat);
        var geocodeResult = await geocodingService.GeocodeAddress(boat.BoatCity);

        if (response > 0)
        {
            if (geocodeResult != null)
            {
                boat.BoatLatitude = geocodeResult.Latitude;
                boat.BoatLongitude = geocodeResult.Longitude;
            }
            else
            {
                // Handle the case when geocoding fails or no result is obtained
                // For example, you can display an error message or take appropriate action
                await App.Current.MainPage.DisplayAlert("Geocoding Failed", "Unable to retrieve latitude and longitude for the specified address.", "OK");
                return;
            }

            boat.BoatSeats = 3;
            boat.BoatPrice = 3.00;
            boat.BoatWithLicense = boat.BoatWithSkipper = false;
            boat.BoatCity = boat.BoatManufacturer = boat.BoatImage = boat.BoatDescription = boat.BoatModel = boat.BoatName = string.Empty;
            this.StateHasChanged();
            await App.Current.MainPage.DisplayAlert("Success", "Boat was successfully added", "OK");
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Boat was not created", "Something went wrong, try again", "OK");
        }
    }
}
